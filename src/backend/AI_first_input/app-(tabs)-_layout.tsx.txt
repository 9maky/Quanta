Main File:
Path: app/(tabs)/_layout.tsx
Code: 
SplashScreen.preventAutoHideAsync();

const SCREEN_WIDTH = Dimensions.get('window').width;
const NAV_BAR_WIDTH = 376;
const HORIZONTAL_MARGIN = 7;

export default function TabLayout() {
  const colorScheme = useColorScheme();

  const [fontsLoaded] = useFonts({
    'Inter-Regular': require('@/assets/fonts/Inter-Regular.ttf'),
    'Inter-Bold': require('@/assets/fonts/Inter-Bold.ttf'),
    'Inter-SemiBold': require('@/assets/fonts/Inter-SemiBold.ttf'),
    'Inter-Medium': require('@/assets/fonts/Inter-Medium.ttf'),
    'Inter-Light': require('@/assets/fonts/Inter-Light.ttf'),
    'Inter-ExtraLight': require('@/assets/fonts/Inter-ExtraLight.ttf'),
    'Inter-Thin': require('@/assets/fonts/Inter-Thin.ttf'),
    'Inter-Black': require('@/assets/fonts/Inter-Black.ttf'),
    'Inter-ExtraBold': require('@/assets/fonts/Inter-ExtraBold.ttf'),
    'Inter-Italic': require('@/assets/fonts/Inter-Italic.ttf'),
  });

  useEffect(() => {
    if (fontsLoaded) {
      SplashScreen.hideAsync();
    }
  }, [fontsLoaded]);

  const onLayoutRootView = useCallback(async () => {
    if (fontsLoaded) {
      await SplashScreen.hideAsync();
    }
  }, [fontsLoaded]);

  if (!fontsLoaded) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Tabs
        screenOptions={{
          tabBarActiveTintColor: Colors[colorScheme ?? 'light'].tint,
          headerShown: false,
          tabBarShowLabel: false,
          tabBarStyle: styles.tabBar,
          tabBarItemStyle: styles.tabBarItem,
        }}
      >
        <Tabs.Screen
          name="index"
          options={{
            tabBarIcon: ({ color, focused }) => (
              <TabBarIcon name={focused ? 'home' : 'home-outline'} color={color} size={24} />
            ),
          }}
        />
        <Tabs.Screen
          name="inventory"
          options={{
            tabBarIcon: ({ color, focused }) => (
              <TabBarIcon name={focused ? 'list' : 'list-outline'} color={color} size={24} />
            ),
          }}
        />
        <Tabs.Screen
          name="recipes"
          options={{
            tabBarIcon: ({ color, focused }) => (
              <TabBarIcon name={focused ? 'restaurant' : 'restaurant-outline'} color={color} size={24} />
            ),
          }}
        />
        <Tabs.Screen
          name="mealplanner"
          options={{
            tabBarIcon: ({ color, focused }) => (
              <TabBarIcon name={focused ? 'calendar' : 'calendar-outline'} color={color} size={24} />
            ),
          }}
        />
        <Tabs.Screen
          name="cookingbot"
          options={{
            tabBarIcon: ({ color, focused }) => (
              <TabBarIcon name={focused ? 'chatbubbles' : 'chatbubbles-outline'} color={color} size={24} />
            ),
          }}
        />
        <Tabs.Screen
          name="profile"
          options={{
            tabBarIcon: ({ color, focused }) => (
              <TabBarIcon name={focused ? 'menu' : 'menu-outline'} color={color} size={24} />
            ),
          }}
        />
      </Tabs>
    </View>
  );
}


Files used in this main file:
hooks/useColorScheme.ts: export { useColorScheme } from 'react-native';

hooks/useColorScheme.web.ts: // NOTE: The default React Native styling doesn't support server rendering.
// Server rendered styles should not change between the first render of the HTML
// and the first render on the client. Typically, web developers will use CSS media queries
// to render different styles on the client and server, these aren't directly supported in React Native
// but can be achieved using a styling library like Nativewind.
export function useColorScheme() {
  return 'light';
}

constants/Colors.ts: /**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const mainOrange = '#FE7C22';
const lightOrange = '#FFAE00';
const lightPeach = '#FFF2E9';
const black = '#101720';
const darkGray = '#959595';
const lightGray = '#BBBBBB';
const white = '#FFFFFF';
const back = "#f7f7f9"
export const Colors = {
  light: {
    text: black,
    background: back,
    cont: white,
    tint: mainOrange,
    icon: darkGray,
    tabIconDefault: lightGray,
    tabIconSelected: mainOrange,
    mainOrange,
    lightOrange,
    lightPeach,
    black,
    darkGray,
    lightGray,
  },
  dark: {
    text: '#ECEDEE',
    background: black,
    tint: lightOrange,
    icon: lightGray,
    tabIconDefault: darkGray,
    tabIconSelected: lightOrange,
    mainOrange,
    lightOrange,
    lightPeach,
    black,
    darkGray,
    lightGray,
  },
};


export const Gradients = {
  main: [mainOrange, lightOrange],
};

export const Shadows = {
  main: {
    shadowColor: black,
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.1,
    shadowRadius: 24,
    elevation: 5,
  },
};
components/navigation/TabBarIcon.tsx: 
export function TabBarIcon({ style, ...rest }: IconProps<ComponentProps<typeof Ionicons>['name']>) {
  return <Ionicons size={28} style={[{ marginBottom: -3 }, style]} {...rest} />;
}

