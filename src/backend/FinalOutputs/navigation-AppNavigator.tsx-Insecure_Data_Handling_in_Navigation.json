{
  "title": "Insecure Data Handling in Navigation",
  "description": "The navigation component exposes sensitive data such as user IDs or tokens in the URL, which can be intercepted and exploited by attackers.",
  "content": "## Insecure Data Handling in Navigation\n\n### Description\n\nThe navigation component in the application exposes sensitive data such as user IDs or tokens in the URL. This can lead to potential security risks as URLs can be easily intercepted and manipulated by attackers.\n\n### Relevant Code Snippet\n\n```typescript\n// navigation/AppNavigator.tsx\n\n// Example of insecure data handling in navigation\nconst navigateToUserProfile = (userId: string) => {\n  navigation.navigate('UserProfile', { userId });\n};\n```\n\n### Potential Attack Vectors\n\n- **URL Interception**: An attacker can intercept the URL and extract sensitive information such as user IDs or tokens.\n- **URL Manipulation**: An attacker can manipulate the URL to access unauthorized resources or perform actions on behalf of the user.\n\n### Recommended Solutions\n\n1. **Use Secure Storage**: Store sensitive data in secure storage mechanisms provided by the platform (e.g., AsyncStorage for React Native) instead of passing it through URLs.\n2. **Encrypt Sensitive Data**: If sensitive data must be passed through URLs, ensure it is encrypted.\n3. **Use HTTPS**: Always use HTTPS to encrypt data in transit and prevent interception.\n\n### Example of Secure Implementation\n\n```typescript\n// navigation/AppNavigator.tsx\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst navigateToUserProfile = async (userId: string) => {\n  await AsyncStorage.setItem('userId', userId);\n  navigation.navigate('UserProfile');\n};\n```\n\nBy following these best practices, you can significantly reduce the risk of sensitive data exposure and enhance the security of your application.",
  "mainFile": "",
  "components": []
}