Title of the problem is: Sensitive Data Exposure. Here is the description of the problem: The code uses console.error to log errors, which can expose sensitive information such as error messages and stack traces. This can be useful for debugging but should be avoided in production environments.
And here are the codes where this problem is appearing:
app/(tabs)/index.tsx:
  StyleSheet,
  View,
  SafeAreaView,
  Platform,
  StatusBar,
  ScrollView,
} from "react-native";
  horizontalScale,
  verticalScale,
  moderateScale,
} from "@/constants/responsive";

const HomeScreen: React.FC<HomeScreenProps> = () => {
  const router = useRouter();
  const [userName, setUserName] = useState("");
  const [groceryCount, setGroceryCount] = useState(0);
  const [recentRecipes, setRecentRecipes] = useState<Recipe[]>([]);
  const [selectedRecipe, setSelectedRecipe] = useState<Recipe | null>(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isWelcomeModalVisible, setIsWelcomeModalVisible] = useState(true);

  const { recipes, completeRecipe } = useRecipes();

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const storedGroceryCount =
        (await AsyncStorage.getItem("groceryCount")) || "0";
      const storedRecipes = await AsyncStorage.getItem("recipes");

      setGroceryCount(parseInt(storedGroceryCount, 10));
      if (storedRecipes) setRecentRecipes(JSON.parse(storedRecipes));
    } catch (error) {
      console.error("Failed to load data", error);
    }
  };

  const handleInventoryPress = () => router.push("/inventory");
  const handleGenerateRecipe = () => router.push("/recipes");
  const handleViewAllRecipes = () => router.push("/recipes");
  const handleRecipePress = (recipe: Recipe) => {
    setSelectedRecipe(recipe);
    setIsModalVisible(true);
  };
  const { totalItemCount } = useInventory();

  const closeModal = () => {
    setIsModalVisible(false);
    setSelectedRecipe(null);
  };

  const closeWelcomeModal = () => {
    setIsWelcomeModalVisible(false);
  };

  const updateRecentRecipes = async (completedRecipe: Recipe) => {
    const updatedRecipes = [
      completedRecipe,
      ...recentRecipes.filter((recipe) => recipe.id !== completedRecipe.id),
    ];
    setRecentRecipes(updatedRecipes);
    await AsyncStorage.setItem("recipes", JSON.stringify(updatedRecipes));
  };

  const handleRecipeComplete = (completedRecipe: Recipe) => {
    completeRecipe(completedRecipe);
    closeModal();
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView
        style={styles.container}
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.logoContainer}>
          <YummyLogo />
        </View>
        <WelcomeMessage name={""} />
        <InventoryOverview
          groceryCount={groceryCount}
          onPress={handleInventoryPress}
        />
        <RecipeGenerator onPress={handleGenerateRecipe} />
        <RecentRecipes
          recipes={recipes.slice(0, 4)}
          onViewAll={handleViewAllRecipes}
          onRecipePress={handleRecipePress}
        />
      </ScrollView>
      {selectedRecipe && (
        <RecipeModal
          visible={isModalVisible}
          onClose={closeModal}
          recipe={selectedRecipe}
          onComplete={handleRecipeComplete}
        />
      )}
      <WelcomeModal
        visible={isWelcomeModalVisible}
        onClose={closeWelcomeModal}
      />
    </SafeAreaView>
  );
};


export default HomeScreen;


context/InventoryContext.tsx:

interface InventoryContextType {
  totalItemCount: number;
  setTotalItemCount: (count: number) => void;
}

const InventoryContext = createContext<InventoryContextType | undefined>(undefined);

interface InventoryProviderProps {
  children: ReactNode;
}

export const InventoryProvider: React.FC<InventoryProviderProps> = ({ children }) => {
  const [totalItemCount, setTotalItemCount] = useState(0);

  useEffect(() => {
    AsyncStorage.setItem('totalItemCount', totalItemCount.toString());
  }, [totalItemCount]);

  return (
    <InventoryContext.Provider value={{ totalItemCount, setTotalItemCount }}>
      {children}
    </InventoryContext.Provider>
  );
};

export const useInventory = () => {
  const context = useContext(InventoryContext);
  if (context === undefined) {
    throw new Error('useInventory must be used within an InventoryProvider');
  }
  return context;
};

context/RecipesContext.tsx:
  createContext,
  useState,
  useContext,
  useEffect,
  ReactNode,
} from "react";

interface RecipesContextType {
  recipes: Recipe[];
  addRecipe: (newRecipe: Recipe) => void;
  completeRecipe: (completedRecipe: Recipe) => void;
  clearAllRecipes: () => void; // Add this new method
}

const RecipesContext = createContext<RecipesContextType | undefined>(undefined);

export const RecipesProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [recipes, setRecipes] = useState<Recipe[]>([]);

  useEffect(() => {
    loadRecipes();
  }, []);

  const loadRecipes = async () => {
    try {
      const storedRecipes = await AsyncStorage.getItem("recipes");
      if (storedRecipes) {
        setRecipes(JSON.parse(storedRecipes));
      }
    } catch (error) {
      console.error("Failed to load recipes", error);
    }
  };

  const saveRecipes = async (updatedRecipes: Recipe[]) => {
    try {
      await AsyncStorage.setItem("recipes", JSON.stringify(updatedRecipes));
      setRecipes(updatedRecipes);
    } catch (error) {
      console.error("Failed to save recipes", error);
    }
  };

  const addRecipe = (newRecipe: Recipe) => {
    const updatedRecipes = [newRecipe, ...recipes];
    saveRecipes(updatedRecipes);
  };

  const completeRecipe = (completedRecipe: Recipe) => {
    const updatedRecipes = [
      completedRecipe,
      ...recipes.filter((recipe) => recipe.id !== completedRecipe.id),
    ];
    saveRecipes(updatedRecipes);
  };

  const clearAllRecipes = async () => {
    try {
      await AsyncStorage.removeItem("recipes");
      setRecipes([]);
    } catch (error) {
      console.error("Failed to clear recipes", error);
    }
  };

  return (
    <RecipesContext.Provider
      value={{ recipes, addRecipe, completeRecipe, clearAllRecipes }}
    >
      {children}
    </RecipesContext.Provider>
  );
};

export const useRecipes = () => {
  const context = useContext(RecipesContext);
  if (context === undefined) {
    throw new Error("useRecipes must be used within a RecipesProvider");
  }
  return context;
};


